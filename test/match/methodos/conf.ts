/* eslint-disable no-undef */
import {
  baseExtract,
  simpleExtract,
  simple,
  cross,
  insertNewStones,
  IMatchValidate,
  stoneConfig,
  crossExtract,
  clearMatchs,
  gameStart,
  isMatch,
  nextStage,
  category,
  gameProcess,
  organizeStructure,
  IBasicTable,
  activeEffects,
  sequenceHistory,
  activeEffectsInMatchs,
  clearInitEffect,
  clearSequentialEffects
} from '../../../src/engines'
import {
  base,
  row,
  column,
  crossBase,
  categoryBase,
  sevenDerivs,
  simpleMatchTestMultiple,
  EffectsDefaults,
  EffectsMove
} from './mock'

const { categoryApplication, defaultfive, defaultfour } = category
const { occurrenceRanger, filterMatchSimple } = simpleExtract
const { IsCross, filterCrossMatch } = crossExtract
const { extractRow, extractColumn } = baseExtract
const { simpleMatchValitador } = simple
const { crossMatchValitador } = cross
const {
  crossTableModelOne,
  crossTableModelTwo,
  crossTableModelThree,
  crossValideModelOne,
  crossValideModelTwo,
  crossValideModelThree,
  crossTableModelFour,
  crossTableModelFive,
  crossValideModelFour,
  crossValideModelFive,
  crossTableModelSix,
  crossValideModelSix,
  clearTableModelOne,
  clearTableModelTwo,
  clearTableModelThree,
  clearTableModelFour,
  clearTableModelFive,
  clearTableModelSix,
  crossTableModelSeven,
  crossValideModelSeven,
  clearTableModelSeven
} = crossBase

const {
  tableModelEight,
  tableModelNineMoveOne,
  tableModelNineMoveTwo,
  tableModelTenMoveOne,
  tableModelTenMoveTwo,
  tableModelEleven,
  clearTableModelEight,
  clearTableModelEleven,
  clearTableModelBaseCategory,
  clearTableModelOneCategory,
  clearTableModelTwoCategory,
  clearTableModelThreeCategory,
  clearTableModelFourCategory,
  clearTableModelFiveCategory,
  clearTableModelSixCategory,
  clearTableModelSevenCategory,
  clearTableModelNineMoveOne,
  clearTableModelNineMoveTwo,
  clearTableModelTenMoveOne,
  clearTableModelTenMoveTwo,
  clearTableModelTenMoveThree,
  clearTableModelTenMoveFour,
  clearTableModelTenMoveFive,
  tableModelTenMoveThree,
  tableModelTenMoveFour,
  tableModelTenMoveFive
} = categoryBase

const {
  crossTableModelSevenDerivOne,
  crossTableModelSevenDerivTwo,
  crossTableModelSevenDerivThree,
  crossTableModelSevenDerivFour,
  crossTableModelSevenDerivFive,
  crossTableModelSevenDerivSix,
  crossTableModelSevenDerivSeven,
  crossTableModelSevenDerivEight,
  clearCrossTableModelSevenDerivOne,
  clearCrossTableModelSevenDerivTwo,
  clearCrossTableModelSevenDerivThree,
  clearCrossTableModelSevenDerivFour,
  clearCrossTableModelSevenDerivFive,
  clearCrossTableModelSevenDerivSix,
  clearCrossTableModelSevenDerivSeven,
  clearCrossTableModelSevenDerivEight,
  crossValideModelSevenDerivOne,
  crossValideModelSevenDerivTwo,
  crossValideModelSevenDerivThree,
  crossValideModelSevenDerivFour,
  crossValideModelSevenDerivFive,
  crossValideModelSevenDerivSix,
  crossValideModelSevenDerivSeven,
  crossValideModelSevenDerivEight
} = sevenDerivs

const {
  multipleSimpleMatchOne,
  multipleSimpleMatchTwo,
  multipleSimpleMatchThree,
  multipleSimpleMatchFour,
  valideMultipleSimpleMatchOne,
  valideMultipleSimpleMatchTwo,
  valideMultipleSimpleMatchThree,
  valideMultipleSimpleMatchFour,
  clearMultipleSimpleMatchOne,
  clearMultipleSimpleMatchTwo,
  clearMultipleSimpleMatchThree,
  clearMultipleSimpleMatchFour
} = simpleMatchTestMultiple

const {
  tableModelEffectOne,
  tableModelEffectTwo,
  tableModelEffectThree,
  activateEffectTableOneModelOne,
  activateEffectTableOneModelTwo,
  activateEffectTableOneModelThree,
  activateEffectTableOneModelFour,
  activateEffectTableOneModelThreeSequence,
  activateEffectTableOneModelFourSequence,
  activateEffectTableTwoModelOne,
  activateEffectTableTwoModelOneSequence,
  activateEffectTableTwoModelTwo,
  activateEffectTableTwoModelTwoSequence,
  activateEffectTableTwoModelThree,
  activateEffectTableTwoModelThreeSequence,
  activateEffectTableTwoModelFour,
  activateEffectTableTwoModelFourSequence,
  activateEffectTableTwoModelFive,
  activateEffectTableTwoModelFiveSequence,
  activateEffectTableThreeModelOne,
  activateEffectTableThreeModelOneSequence,
  activateEffectTableThreeModelTwo,
  activateEffectTableThreeModelTwoSequence
} = EffectsDefaults

const {
  tableModelEffectOneModelOne,
  tableModelEffectOneModelTwo,
  tableModelEffectOneModelThree,
  tableModelEffectOneModelFour,
  tableModelEffectTwoModelOne,
  tableModelEffectTwoModelTwo,
  tableModelEffectTwoModelThree,
  tableModelEffectOneModelOneResultOne,
  tableModelEffectTwoModelOneResultOne,
  tableModelEffectThreeModelOneResultOne,
  tableTwoModelEffectModelOneResultOne,
  tableTwoModelEffectModelOneResultTwo,
  tableThreeModelEffectModelOneResultOne,
  tableThreeModelEffectModelOneResultTwo,
  tableThreeModelEffectModelThreeResultOne,
  tableThreeModelEffectModelThreeResultTwo,
  tableModelEffectOneModelOneResult,
  tableModelEffectOneModelTwoResult,
  tableModelEffectOneModelThreeResult,
  tableModelEffectTwoModelOneResult,
  tableModelEffectTwoModelTwoResult,
  tableModelEffectTwoModelThreeResult
} = EffectsMove

const config = stoneConfig({})

const activeCategorys = [
  {
    effect: defaultfour.patternFour,
    category: 'pattern_four',
    stoneIds: [1, 2, 3, 4, 5],
    rule: 4
  },
  {
    effect: defaultfive.patternFive,
    category: 'pattern_five',
    stoneIds: [1, 2, 3, 4, 5],
    rule: 5
  }
]

const testInsertionNewStones = (tableMock: IBasicTable[][], tableTest: IBasicTable[][]) =>
  tableMock.forEach((e, row) =>
    e.forEach((cell, column) => {
      if (cell.type === 'void') {
        expect(tableTest[row][column]).not.toStrictEqual(cell)
      } else {
        expect(tableTest[row][column]).toStrictEqual(cell)
      }
    })
  )

const callStone = {
  dark: { id: 1, type: 'dark', category: '' },
  light: { id: 2, type: 'light', category: '' },
  red: { id: 3, type: 'red', category: '' },
  blue: { id: 4, type: 'blue', category: '' },
  green: { id: 5, type: 'green', category: '' }
}

const callStoneFour = {
  dark: { id: 1, type: 'dark', category: 'pattern_four' },
  light: { id: 2, type: 'light', category: 'pattern_four' },
  red: { id: 3, type: 'red', category: 'pattern_four' },
  blue: { id: 4, type: 'blue', category: 'pattern_four' },
  green: { id: 5, type: 'green', category: 'pattern_four' }
}

const callStoneFive = {
  dark: { id: 1, type: 'dark', category: 'pattern_five' },
  light: { id: 2, type: 'light', category: 'pattern_five' },
  red: { id: 3, type: 'red', category: 'pattern_five' },
  blue: { id: 4, type: 'blue', category: 'pattern_five' },
  green: { id: 5, type: 'green', category: 'pattern_five' }
}

export {
  gameStart,
  occurrenceRanger,
  filterMatchSimple,
  IsCross,
  filterCrossMatch,
  extractRow,
  extractColumn,
  simpleMatchValitador,
  IMatchValidate,
  base,
  row,
  column,
  stoneConfig,
  config,
  crossTableModelOne,
  crossTableModelTwo,
  crossTableModelThree,
  crossValideModelOne,
  crossValideModelTwo,
  crossValideModelThree,
  crossTableModelFour,
  crossTableModelFive,
  crossValideModelFour,
  crossValideModelFive,
  crossTableModelSix,
  crossValideModelSix,
  clearMatchs,
  crossMatchValitador,
  clearTableModelOne,
  clearTableModelTwo,
  clearTableModelThree,
  clearTableModelFour,
  clearTableModelFive,
  clearTableModelSix,
  insertNewStones,
  crossTableModelSeven,
  crossValideModelSeven,
  clearTableModelSeven,
  tableModelEight,
  tableModelNineMoveOne,
  tableModelNineMoveTwo,
  tableModelTenMoveOne,
  tableModelTenMoveTwo,
  tableModelTenMoveThree,
  tableModelTenMoveFour,
  tableModelTenMoveFive,
  tableModelEleven,
  clearTableModelEight,
  clearTableModelEleven,
  isMatch,
  nextStage,
  categoryApplication,
  gameProcess,
  clearTableModelBaseCategory,
  clearTableModelOneCategory,
  clearTableModelTwoCategory,
  clearTableModelThreeCategory,
  clearTableModelFourCategory,
  clearTableModelFiveCategory,
  clearTableModelSixCategory,
  clearTableModelSevenCategory,
  crossTableModelSevenDerivOne,
  crossTableModelSevenDerivTwo,
  crossTableModelSevenDerivThree,
  crossTableModelSevenDerivFour,
  crossTableModelSevenDerivFive,
  crossTableModelSevenDerivSix,
  crossTableModelSevenDerivSeven,
  crossTableModelSevenDerivEight,
  clearCrossTableModelSevenDerivOne,
  clearCrossTableModelSevenDerivTwo,
  clearCrossTableModelSevenDerivThree,
  clearCrossTableModelSevenDerivFour,
  clearCrossTableModelSevenDerivFive,
  clearCrossTableModelSevenDerivSix,
  clearCrossTableModelSevenDerivSeven,
  clearCrossTableModelSevenDerivEight,
  crossValideModelSevenDerivOne,
  crossValideModelSevenDerivTwo,
  crossValideModelSevenDerivThree,
  crossValideModelSevenDerivFour,
  crossValideModelSevenDerivFive,
  crossValideModelSevenDerivSix,
  crossValideModelSevenDerivSeven,
  crossValideModelSevenDerivEight,
  multipleSimpleMatchOne,
  multipleSimpleMatchTwo,
  multipleSimpleMatchThree,
  multipleSimpleMatchFour,
  valideMultipleSimpleMatchOne,
  valideMultipleSimpleMatchTwo,
  valideMultipleSimpleMatchThree,
  valideMultipleSimpleMatchFour,
  clearMultipleSimpleMatchOne,
  clearMultipleSimpleMatchTwo,
  clearMultipleSimpleMatchThree,
  clearMultipleSimpleMatchFour,
  organizeStructure,
  IBasicTable,
  defaultfive,
  defaultfour,
  activeCategorys,
  testInsertionNewStones,
  clearTableModelNineMoveOne,
  clearTableModelNineMoveTwo,
  clearTableModelTenMoveOne,
  clearTableModelTenMoveTwo,
  clearTableModelTenMoveThree,
  clearTableModelTenMoveFour,
  clearTableModelTenMoveFive,
  tableModelEffectOne,
  tableModelEffectTwo,
  tableModelEffectThree,
  callStone,
  callStoneFour,
  callStoneFive,
  activeEffects,
  sequenceHistory,
  activateEffectTableOneModelOne,
  activateEffectTableOneModelTwo,
  activateEffectTableOneModelThree,
  activateEffectTableOneModelFour,
  activateEffectTableOneModelThreeSequence,
  activateEffectTableOneModelFourSequence,
  activateEffectTableTwoModelOne,
  activateEffectTableTwoModelOneSequence,
  activateEffectTableTwoModelTwo,
  activateEffectTableTwoModelTwoSequence,
  activateEffectTableTwoModelThree,
  activateEffectTableTwoModelThreeSequence,
  activateEffectTableTwoModelFour,
  activateEffectTableTwoModelFourSequence,
  activateEffectTableTwoModelFive,
  activateEffectTableTwoModelFiveSequence,
  activateEffectTableThreeModelOne,
  activateEffectTableThreeModelOneSequence,
  activateEffectTableThreeModelTwo,
  activateEffectTableThreeModelTwoSequence,
  tableModelEffectOneModelOne,
  tableModelEffectOneModelTwo,
  tableModelEffectOneModelThree,
  tableModelEffectOneModelFour,
  tableModelEffectTwoModelOne,
  tableModelEffectTwoModelTwo,
  tableModelEffectTwoModelThree,
  activeEffectsInMatchs,
  tableModelEffectOneModelOneResultOne,
  tableModelEffectTwoModelOneResultOne,
  tableModelEffectThreeModelOneResultOne,
  tableTwoModelEffectModelOneResultOne,
  tableTwoModelEffectModelOneResultTwo,
  tableThreeModelEffectModelOneResultOne,
  tableThreeModelEffectModelOneResultTwo,
  tableThreeModelEffectModelThreeResultOne,
  tableThreeModelEffectModelThreeResultTwo,
  tableModelEffectOneModelOneResult,
  tableModelEffectOneModelTwoResult,
  tableModelEffectOneModelThreeResult,
  tableModelEffectTwoModelOneResult,
  tableModelEffectTwoModelTwoResult,
  tableModelEffectTwoModelThreeResult,
  clearInitEffect,
  clearSequentialEffects
}
